1
00:00:00,390 --> 00:00:03,600
クラスに関して2つの例を見てきました

2
00:00:03,600 --> 00:00:07,010
1つはTurtleを使って図形を描き

3
00:00:07,010 --> 00:00:10,300
もう1つはTwilioを使ってメッセージを送りました

4
00:00:10,300 --> 00:00:13,710
Turtleを使って図形を描いた時

5
00:00:13,710 --> 00:00:16,090
このようなコードを書きました

6
00:00:16,090 --> 00:00:18,580
brad ＝ turtle．Turtle（）です

7
00:00:18,580 --> 00:00:21,480
このコードは次のような意味です

8
00:00:21,480 --> 00:00:26,320
Pythonの中にはturtleというファイルがあり

9
00:00:26,320 --> 00:00:29,640
そのファイル内にTurtleというクラスがあります

10
00:00:29,640 --> 00:00:35,800
この構文に括弧をつけて使っているクラスに
アクセスするとします

11
00:00:35,800 --> 00:00:37,950
この時裏では

12
00:00:37,950 --> 00:00:41,290
＿＿init＿＿関数が呼び出されています

13
00:00:41,290 --> 00:00:43,000
＿＿init＿＿関数は

14
00:00:43,000 --> 00:00:47,910
bradという新しいインスタンスのために
メモリにスペースを作ったり初期化したりします

15
00:00:47,910 --> 00:00:52,950
bradはクラスTurtleの
オブジェクトまたはインスタンスです

16
00:00:52,950 --> 00:00:54,800
インスタンスであるbradは

17
00:00:54,800 --> 00:00:57,880
Turtleクラスの中に定義されたことを行えます

18
00:00:57,880 --> 00:01:01,440
例えばforwardはturtleを前進させます

19
00:01:01,440 --> 00:01:03,940
同様に次のような構文があります

20
00:01:03,940 --> 00:01:06,950
client ＝ rest．TwilioRestClient（）

21
00:01:06,950 --> 00:01:08,660
このコードが示しているのは

22
00:01:08,660 --> 00:01:14,540
twilioの中にrestというフォルダがあり
そのフォルダの中に

23
00:01:14,540 --> 00:01:20,600
TwilioRestClientというクラスを持つ
Pythonのファイルがあるということです

24
00:01:20,600 --> 00:01:22,380
このコードを使えば

25
00:01:22,380 --> 00:01:26,980
TwilioRestClientが定義されている所に
アクセスできます

26
00:01:26,980 --> 00:01:33,450
そしてTwilioRestClientクラスの中で定義された
＿＿init＿＿関数を呼び出します

27
00:01:33,450 --> 00:01:39,000
この関数を使えばTwilioRestClientクラスの
オブジェクトまたはインスタンスのために

28
00:01:39,000 --> 00:01:42,970
初期化したりメモリにスペースを作ったりします

29
00:01:42,970 --> 00:01:46,080
そのオブジェクトをclientと呼びます

30
00:01:46,080 --> 00:01:48,100
clientオブジェクトは

31
00:01:48,100 --> 00:01:54,780
メールを送ることができるクラス
TwilioRestClientの中で定義されたことができます

32
00:01:54,780 --> 00:01:57,390
クラスについて考える時は

33
00:01:57,390 --> 00:02:00,390
建物の設計図を思い浮かべてください

34
00:02:00,390 --> 00:02:02,690
設計図には建物に関する情報があります

35
00:02:02,690 --> 00:02:04,700
例えば建物にある部屋の数や

36
00:02:04,700 --> 00:02:07,900
建物の地下についてです

37
00:02:07,900 --> 00:02:10,620
同じ設計図を使って複数の建物を建てられます

38
00:02:10,620 --> 00:02:14,860
例えば黄色い壁の集合住宅や

39
00:02:14,860 --> 00:02:18,300
青い壁のオフィスビルなどです

40
00:02:18,300 --> 00:02:21,290
ではTurtleクラスの例を使って同様に考えてみましょう

41
00:02:21,290 --> 00:02:26,890
Turtleクラスはturtleを前進させる方法や

42
00:02:26,890 --> 00:02:30,010
右折させる方法など様々な情報を持っています

43
00:02:30,010 --> 00:02:33,430
ではあるクラスを設計図として使用して

44
00:02:33,430 --> 00:02:37,920
bradやangieのようなインスタンスを複数作りましょう

45
00:02:37,920 --> 00:02:43,290
これらのインスタンスは
設計図であるクラスに定義されたことができます

46
00:02:43,290 --> 00:02:46,440
例えば前進したり右に曲がったり
円を描いたりすることです

47
00:02:46,440 --> 00:02:50,160
クラスはもう1つありましたね

48
00:02:50,160 --> 00:02:53,080
TwilioRestClientです

49
00:02:53,080 --> 00:02:55,470
狭いので省略して書いています

50
00:02:55,470 --> 00:03:00,570
このクラスはtwilioにアクセスして
メッセージを送るための情報を持っています

51
00:03:00,570 --> 00:03:06,450
この設計図からclientというインスタンスを作れます

52
00:03:06,450 --> 00:03:12,020
clientはメッセージを送るなど
クラスに定義されていることを行えます

53
00:03:12,020 --> 00:03:17,900
クラスというものは
基本的な情報を持つ設計図のようなものです

54
00:03:17,900 --> 00:03:23,330
そしてオブジェクトは設計図のインスタンスです

