1
00:00:00,300 --> 00:00:02,500
在我运行这个程序前 我想先

2
00:00:02,500 --> 00:00:04,950
分享一下我对运行这条代码后会发生什么

3
00:00:04,950 --> 00:00:07,510
的假设 我们首先在此

4
00:00:07,510 --> 00:00:10,740
所做的事情之一 是创建类 child 的一个

5
00:00:10,740 --> 00:00:14,450
实例 我们称之为 miley_cyrus 一旦运行这行

6
00:00:14,450 --> 00:00:18,020
代码 类 child 中的 init 方法就

7
00:00:18,020 --> 00:00:21,680
会被调用 而 init 方法中的第一行是

8
00:00:21,680 --> 00:00:25,450
这个打印语句 所以我的假设是这个打印语句

9
00:00:25,450 --> 00:00:29,080
会首先在我们的输出中打印出来 在此之后 

10
00:00:29,080 --> 00:00:31,590
类 parent 的构造函数将被

11
00:00:31,590 --> 00:00:34,370
调用 所以控制会从这里

12
00:00:34,370 --> 00:00:38,120
移到上面这里 当类 parent 的 init 方法被调用 

13
00:00:38,120 --> 00:00:40,580
此语句将被执行 所以

14
00:00:40,580 --> 00:00:44,290
我的假设是调用的父类构造函数打印语句将

15
00:00:44,290 --> 00:00:47,395
是第二个打印出来的东西 然后实例

16
00:00:47,395 --> 00:00:51,760
变量的姓和眼睛颜色会被适当初始化 

17
00:00:51,760 --> 00:00:54,250
在类 parent 的 init 方法成功

18
00:00:54,250 --> 00:00:57,010
运行后 控制会回到这里 那时 

19
00:00:57,010 --> 00:01:01,280
实例变量 number_of_toys 将被成功初始化 

20
00:01:01,280 --> 00:01:03,700
那时 类 child 的 init 方法

21
00:01:03,700 --> 00:01:06,480
完成 也就是说实例 miley_cyrus 已被

22
00:01:06,480 --> 00:01:10,580
成功创建 然后 以下两个尝试

23
00:01:10,580 --> 00:01:12,560
为 miley_cyrus 打印姓和玩具数量的打印语句

24
00:01:12,560 --> 00:01:16,500
会按那个顺序执行 

25
00:01:16,500 --> 00:01:21,160
好的 这一次 我就来实际运行一下这条代码 这是

26
00:01:21,160 --> 00:01:25,460
我的输出 它跟我猜想的结果非常

27
00:01:25,460 --> 00:01:27,900
接近 现在 我要你将视频暂停几秒钟 

28
00:01:27,900 --> 00:01:31,750
看看这个输出是否符合你的假设 

