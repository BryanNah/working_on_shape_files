1
00:00:00,480 --> 00:00:02,980
感谢你能分享你的答案 既然

2
00:00:02,980 --> 00:00:05,670
我们第一次使用到了类

3
00:00:05,670 --> 00:00:07,790
我想在这里着重讲一下

4
00:00:07,790 --> 00:00:09,920
在大学时期 我花了很长时间

5
00:00:09,920 --> 00:00:12,560
才理解的东西 之前当我们想使用

6
00:00:12,560 --> 00:00:18,320
函数时 我们写了如 webbrowser.open() 这样的代码 但是

7
00:00:18,320 --> 00:00:20,430
当我们想创建这个 turtle 类的实例时

8
00:00:20,430 --> 00:00:23,755
我们写了代码

9
00:00:23,755 --> 00:00:27,280
turtle.Turtle() 现在 我们一起看一下这两个语句

10
00:00:27,280 --> 00:00:31,070
它们看上去十分相似 像是

11
00:00:31,070 --> 00:00:35,750
我们在这两个示例中都调用了函数 但实际上这背后发生

12
00:00:35,750 --> 00:00:38,685
着不同的事情 当我们调用

13
00:00:38,685 --> 00:00:41,810
webbrowser.open() 我们所做的是调用

14
00:00:41,810 --> 00:00:44,660
一个函数 这没什么大不了 但是当

15
00:00:44,660 --> 00:00:48,830
我们调用 turtle.Turtle() init 函数在 Turtle 类中被定义

16
00:00:48,830 --> 00:00:51,540
它才是实际上被调用了的函数

17
00:00:51,540 --> 00:00:55,100
并且它创建或初始化了一个

18
00:00:55,100 --> 00:00:57,490
新实例所需的内存 这个实例我们称为

19
00:00:57,490 --> 00:01:00,450
brad 尽管看上去我们在这两个例子中都

20
00:01:00,450 --> 00:01:03,450
调用了函数 在第一个例子里 我们

21
00:01:03,450 --> 00:01:06,100
调用了 open 而在第二个例子里

22
00:01:06,100 --> 00:01:09,430
调用了 init 但并不是所有函数都是一样的

23
00:01:09,430 --> 00:01:14,210
当我们调用 webbrowser.open() 我们所做的只是

24
00:01:14,210 --> 00:01:18,870
调用一个函数 但是当我们调用 turtle.Turtle() 时 它又

25
00:01:18,870 --> 00:01:23,530
调用了 init 函数 该函数创建或初始化了之前不存在的

26
00:01:23,530 --> 00:01:28,030
内存空间 总结来说 这就是我们如何使用类的

27
00:01:28,030 --> 00:01:31,190
第一个例子 让我们一起看下更多的例子

