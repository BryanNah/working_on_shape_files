1
00:00:00,520 --> 00:00:03,180
好的 这是类 Parent 的代码 

2
00:00:03,180 --> 00:00:05,980
现在我要开始定义类 Child 

3
00:00:08,440 --> 00:00:11,110
我知道类 Child 继承于类 Parent 

4
00:00:11,110 --> 00:00:13,550
而要在 Python 中表明这一点 我们

5
00:00:13,550 --> 00:00:18,350
可以这样说 这里的语法

6
00:00:18,350 --> 00:00:22,180
是说类 Child 现在将继承或重用

7
00:00:22,180 --> 00:00:25,230
类 Parent 中公开可用的所有东西 

8
00:00:25,230 --> 00:00:28,050
但是 当我们开始为该类定义 init 方法

9
00:00:28,050 --> 00:00:30,360
或构造函数时 事情就

10
00:00:30,360 --> 00:00:34,020
变得非常有趣了 我们知道类 Child 有

11
00:00:34,020 --> 00:00:36,740
三个变量 Last name 和 eye color

12
00:00:36,740 --> 00:00:38,960
继承于类 Parent 还有另一个

13
00:00:38,960 --> 00:00:42,000
函数叫 number_of_toys 所以 除了

14
00:00:42,000 --> 00:00:44,820
关键词 self 之外 我将接收

15
00:00:44,820 --> 00:00:47,890
init 函数中作为自变量的那些值 

16
00:00:47,890 --> 00:00:51,530
它们在这里 现在 要初始化我从

17
00:00:51,530 --> 00:00:55,097
类 Parent 中继承的变量 如 last_name 和

18
00:00:55,097 --> 00:00:59,600
eye_color 我实际上要重用类 Parent 中的 init 方法 

19
00:00:59,600 --> 00:01:00,380
这就是我们要做的 

20
00:01:14,430 --> 00:01:20,420
最后一个实例变量 number_of_toys 将在后面初始化 最后 

21
00:01:20,420 --> 00:01:24,730
我要在 init 方法的最开始添加一个打印语句 

22
00:01:33,290 --> 00:01:37,770
好的 现在我们已经定义了类 Child 接下来要做的

23
00:01:37,770 --> 00:01:40,780
是创建类 Child 的一个实例 

24
00:01:40,780 --> 00:01:45,590
我要给它一个适当的名称 miley_cyrus 这里 

25
00:01:45,590 --> 00:01:48,620
我要给它提供三个必要的自变量 

26
00:01:48,620 --> 00:01:51,860
然后我要打印出两项内容 

27
00:01:51,860 --> 00:01:55,850
她的 last name 和 number of toys 

28
00:01:55,850 --> 00:01:58,690
而且 为了专注于获取这些打印语句的

29
00:01:58,690 --> 00:02:01,590
输出 我要暂时把以前的实例

30
00:02:01,590 --> 00:02:07,560
注释掉 好了 我来保存一下这个文件 现在 在我

31
00:02:07,560 --> 00:02:09,780
运行这个程序之前 你可以

32
00:02:09,780 --> 00:02:12,520
想象这个程序的输出会是什么 再看一遍 

33
00:02:12,520 --> 00:02:15,550
这是代码 这是类 Parent 

34
00:02:15,550 --> 00:02:18,390
这是类 Child 而在这里 我们正在创建

35
00:02:18,390 --> 00:02:21,580
类 Child 的一个实例 我们给它起名 miley_cyrus 

36
00:02:21,580 --> 00:02:23,720
那么你认为我运行这段代码时 

37
00:02:23,720 --> 00:02:27,050
会打印出什么呢？将你的答案输入此框中 

