1
00:00:00,260 --> 00:00:03,200
このコード行を実行すると何が起きるかを

2
00:00:03,200 --> 00:00:08,440
少し前に戻って
図形を描いたレッスンの映像で確認しましょう

3
00:00:08,440 --> 00:00:10,570
クラスを例えて言うと

4
00:00:10,570 --> 00:00:13,940
物をたくさん入れてきちんと詰めた箱です

5
00:00:13,940 --> 00:00:17,602
そしてturtle．turtleのように

6
00:00:17,602 --> 00:00:22,720
関数を呼び出すような括弧がついたコードを
書くことができます

7
00:00:22,720 --> 00:00:25,870
コードを実行すると

8
00:00:25,870 --> 00:00:28,210
実際に＿＿init＿＿関数を呼び出します

9
00:00:28,210 --> 00:00:31,800
これはTurtleクラスの内側に定義される関数で

10
00:00:31,800 --> 00:00:34,060
initは初期化の略語です

11
00:00:34,060 --> 00:00:40,640
Turtleクラスの新しいオブジェクトや
インスタンスのためにメモリにスペースを作ります

12
00:00:40,640 --> 00:00:42,430
このインスタンスがbradです

13
00:00:42,430 --> 00:00:44,010
レッスンに戻ります

14
00:00:44,010 --> 00:00:48,480
media．pyというファイルを定義することから始めます

15
00:00:48,480 --> 00:00:49,800
ボードに貼りましょう

16
00:00:51,360 --> 00:00:54,540
Python標準ライブラリの外側というのが重要です

17
00:00:54,540 --> 00:00:58,920
このファイルの中にMovieクラスを定義します

18
00:01:01,520 --> 00:01:05,860
次にmedia．Movie（）というコード行を書きました

19
00:01:05,860 --> 00:01:10,450
Movieクラスの中の＿＿init＿＿関数を呼び出しました

20
00:01:10,450 --> 00:01:16,100
そしてtoy＿storyという
新しいインスタンスを作りました

21
00:01:16,100 --> 00:01:19,140
つまりtoy＿storyというインスタンスのために

22
00:01:19,140 --> 00:01:24,150
＿＿init＿＿関数によって
初期化やメモリの確保が行われます

23
00:01:24,150 --> 00:01:27,330
この関数はコンストラクタとも呼ばれます

24
00:01:27,330 --> 00:01:29,200
メモリにスペースを建設し

25
00:01:29,200 --> 00:01:32,630
toy＿storyなどのインスタンスに
提供するからです

26
00:01:32,630 --> 00:01:35,510
ここまで新しい用語が2つ出てきました

27
00:01:35,510 --> 00:01:37,390
リストに追加しましょう

28
00:01:37,390 --> 00:01:41,470
1つ目はインスタンスで
私たちはtoy＿storyを作りました

29
00:01:41,470 --> 00:01:44,650
2つ目はコンストラクタです

30
00:01:44,650 --> 00:01:47,560
今回の＿＿init＿＿関数のことですね

31
00:01:47,560 --> 00:01:51,215
あとで復習をしますが先にinitを定義しましょう

