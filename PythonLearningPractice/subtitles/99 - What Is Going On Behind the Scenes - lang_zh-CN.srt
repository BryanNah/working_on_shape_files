1
00:00:00,150 --> 00:00:02,320
好的 这是我们目前为止编写的

2
00:00:02,320 --> 00:00:05,180
类 Movie 的代码 注意 你

3
00:00:05,180 --> 00:00:07,450
可能得切换到全屏模式才能

4
00:00:07,450 --> 00:00:11,020
清楚地看到所有的详细信息 现在我非常

5
00:00:11,020 --> 00:00:14,630
好奇 当我运行这行代码时 

6
00:00:14,630 --> 00:00:17,420
后台会发生什么 我提供四条信息或自变量

7
00:00:17,420 --> 00:00:21,200
创建 toy_story 的实例时 

8
00:00:21,200 --> 00:00:25,170
会发生什么？这些信息是电影的名称、

9
00:00:25,170 --> 00:00:28,960
它的故事情节、海报的链接

10
00:00:28,960 --> 00:00:31,920
和 YouTube url 的链接 显然 后面

11
00:00:31,920 --> 00:00:35,100
这两个并非真正的链接或 url

12
00:00:35,100 --> 00:00:39,020
链接 它们只是英语短语 我之所以这么做

13
00:00:39,020 --> 00:00:41,900
是因为屏幕上没有足够的空间来

14
00:00:41,900 --> 00:00:44,490
添加海报和 YouTube 预告片的

15
00:00:44,490 --> 00:00:47,380
完整链接 我们运行这行代码时

16
00:00:47,380 --> 00:00:50,210
发生的第一件事就是 init 函数 

17
00:00:50,210 --> 00:00:52,250
会被调用 你应该记得 init 函数

18
00:00:52,250 --> 00:00:54,250
是我们在类 Movie 中

19
00:00:54,250 --> 00:00:58,360
定义的一个函数 在这个情况下 self 指的是

20
00:00:58,360 --> 00:01:01,910
类自己或创建的实例 即 toy_story 

21
00:01:01,910 --> 00:01:04,420
下一个自变量是 movie_title 它的值

22
00:01:04,420 --> 00:01:08,870
是 Toy Story Movie_storyline 的值是

23
00:01:08,870 --> 00:01:11,920
"玩具复活了" 变量 poster_imag 也获得了

24
00:01:11,920 --> 00:01:15,590
正确的值 最后 trailer_youtube 变量获得了

25
00:01:15,590 --> 00:01:21,890
正确的链接 所以 目前一切进展顺利 现在 一旦 init 被调用 以及

26
00:01:21,890 --> 00:01:23,980
所有的自变量获得正确的

27
00:01:23,980 --> 00:01:27,130
值 实例 toy_story 相关联的所有的

28
00:01:27,130 --> 00:01:30,269
变量也会被适当地初始化 你

29
00:01:30,269 --> 00:01:32,930
应该注意到了 这些

30
00:01:32,930 --> 00:01:38,880
title、storyline、poster_image_url 和 trailer_youtube_url 现在 

31
00:01:38,880 --> 00:01:40,635
如果我尝试打印

32
00:01:40,635 --> 00:01:45,910
toy_story.storyline 它会打印出正确的值 好的 

33
00:01:45,910 --> 00:01:48,790
现在我们知道在创建实例 toy story 时

34
00:01:48,790 --> 00:01:51,700
到底会发生什么 然后我们返回

35
00:01:51,700 --> 00:01:54,270
设计 看看接下来应该做什么 

