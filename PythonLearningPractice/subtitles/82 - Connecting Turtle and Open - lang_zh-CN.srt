1
00:00:00,330 --> 00:00:03,070
Python 标准库表示

2
00:00:03,070 --> 00:00:06,670
函数 open 返回了文件类型的

3
00:00:06,670 --> 00:00:10,400
一个对象 这个词“对象”非常有意思

4
00:00:10,400 --> 00:00:12,930
因为我们之前遇到过 还记得之前

5
00:00:12,930 --> 00:00:14,980
我们使用类 Turtle

6
00:00:14,980 --> 00:00:18,490
画正方形吗？我们当时写的代码就像这样 

7
00:00:18,490 --> 00:00:21,630
这说明 brad 是类 Turtle

8
00:00:21,630 --> 00:00:25,340
的一个对象或实例 同样 当我们编写

9
00:00:25,340 --> 00:00:28,900
这样的代码 即 quotes = open(file location)

10
00:00:28,900 --> 00:00:31,680
而这个文件在我们的案例中是

11
00:00:31,680 --> 00:00:34,990
movie quotes 文件 我们说 quotes 是

12
00:00:34,990 --> 00:00:38,560
文件的一个对象或实例 现在

13
00:00:38,560 --> 00:00:41,150
我们想想 当我们运行

14
00:00:41,150 --> 00:00:43,590
这行代码时 会发生什么 当我们运行这行代码时

15
00:00:43,590 --> 00:00:47,050
一个称为 __init__ 的函数会被

16
00:00:47,050 --> 00:00:50,590
从类 Turtle 中调用 它的作用是

17
00:00:50,590 --> 00:00:57,280
在内存中为对象 brad 创建空间 在 open 案例中

18
00:00:57,280 --> 00:00:59,350
尽管表面上看起来我们

19
00:00:59,350 --> 00:01:02,000
只是在调用一个函数

20
00:01:02,000 --> 00:01:08,480
而没有涉及任何类 但是如果你深入探索一下 open 是

21
00:01:08,480 --> 00:01:11,910
如何在 Python 中实现的 我们会发现

22
00:01:11,910 --> 00:01:16,370
open 是在调用某个类似 init 的函数

23
00:01:16,370 --> 00:01:20,410
创建文件的一个对象 好了

24
00:01:20,410 --> 00:01:24,100
今天讲的专业术语已经够多了 我们将在之后

25
00:01:24,100 --> 00:01:27,410
的课程中聊聊实例和对象 现在 我们应该

26
00:01:27,410 --> 00:01:30,450
高兴的是冒犯语检查程序的第一部分已经完成了

