1
00:00:00,390 --> 00:00:02,810
目前为止 我们已经学习了两个关于类的

2
00:00:02,810 --> 00:00:07,010
例子 其一是我们用来画图形的类 Turtle

3
00:00:07,010 --> 00:00:08,920
另一个是发送短信使用的类 Twilio

4
00:00:08,920 --> 00:00:13,710
当我们使用类 Turtle 创建图形时

5
00:00:13,710 --> 00:00:16,090
我们用了这样一段代码

6
00:00:16,090 --> 00:00:19,880
brad = turtle.Turtle() 这段代码

7
00:00:19,880 --> 00:00:21,840
的真正涵义是

8
00:00:21,840 --> 00:00:26,580
在 Python 内 有一个名为 turtle 的文件

9
00:00:26,580 --> 00:00:29,640
而在那个文件内 有一个叫 Turtle 的类 看

10
00:00:29,640 --> 00:00:31,720
在此处 当我们使用这段语句访问

11
00:00:31,720 --> 00:00:35,180
这个类时 特别是使用了

12
00:00:35,180 --> 00:00:37,950
开闭括号 后台真正所做的

13
00:00:37,950 --> 00:00:41,290
是调用类内的 init 函数 然后

14
00:00:41,290 --> 00:00:44,360
这个 init 函数的实际作用是

15
00:00:44,360 --> 00:00:47,910
为新的实例 (我们称之为 brad) 在内存

16
00:00:47,910 --> 00:00:51,720
中初始化或创建空间 brad 是类 Turtle 的

17
00:00:51,720 --> 00:00:55,020
一个对象或实例 实例 brad 可以

18
00:00:55,020 --> 00:00:57,880
执行在类 Turtle 中所定义的操作 如

19
00:00:57,880 --> 00:01:01,440
让乌龟向前移动 同样 当我们

20
00:01:01,440 --> 00:01:03,940
编写这样一行代码

21
00:01:03,940 --> 00:01:07,950
client = rest.TwilioRestClient() 实际上我们

22
00:01:07,950 --> 00:01:10,900
告诉计算机的是 在 twilio 中 有一个

23
00:01:10,900 --> 00:01:14,630
称为 rest 的文件夹 而在这个文件夹中

24
00:01:14,630 --> 00:01:16,920
有一个 Python 文件 它包含

25
00:01:16,920 --> 00:01:20,600
一个称为 TwilioRestClient 的类 现在 当我们调用

26
00:01:20,600 --> 00:01:22,780
这行代码 访问类

27
00:01:22,780 --> 00:01:26,980
TwilioRestClient() 注意后面带开闭括号

28
00:01:26,980 --> 00:01:28,945
我们实际上也调用了

29
00:01:28,945 --> 00:01:33,450
类 TwilioRestClient 中定义的函数 init

30
00:01:33,450 --> 00:01:35,450
这个函数的作用同样也是为

31
00:01:35,450 --> 00:01:39,080
类 TwilioRestClient 的对象或实例

32
00:01:39,080 --> 00:01:42,970
在内存中初始化或创建空间

33
00:01:42,970 --> 00:01:46,080
我们将那个对象称为 client 对象

34
00:01:46,080 --> 00:01:49,050
client 对象可以执行类 TwillioRestClient

35
00:01:49,050 --> 00:01:54,780
中定义的操作 如发送短信或文本

36
00:01:54,780 --> 00:01:57,390
总而言之 你可以将类

37
00:01:57,390 --> 00:02:00,390
想象成一座建筑的蓝图

38
00:02:00,390 --> 00:02:02,690
蓝图中会包含关于建筑

39
00:02:02,690 --> 00:02:04,700
的信息 如建筑中房间的数量

40
00:02:04,700 --> 00:02:07,900
建筑的面积等

41
00:02:07,900 --> 00:02:10,620
我们可以使用同一张蓝图 建造

42
00:02:10,620 --> 00:02:14,860
多栋建筑 例如黄色墙面的住宅楼或是

43
00:02:14,860 --> 00:02:18,300
蓝色墙面的办公楼 同样的

44
00:02:18,300 --> 00:02:21,290
类也是如此 以我们之前一直使用的

45
00:02:21,290 --> 00:02:23,980
Turtle 为例 它包含关于 turtle 的信息

46
00:02:23,980 --> 00:02:26,890
像是如何让 turtle 向前移动

47
00:02:26,890 --> 00:02:30,010
如何向右转等 我们

48
00:02:30,010 --> 00:02:33,430
可以将类作为蓝图或模板

49
00:02:33,430 --> 00:02:37,920
来创建多个实例 如 Brad 和 Angie

50
00:02:37,920 --> 00:02:40,570
这些实例可以执行

51
00:02:40,570 --> 00:02:43,290
我们的类或蓝图中定义的操作

52
00:02:43,290 --> 00:02:46,440
比如说向前移、向右转和画

53
00:02:46,440 --> 00:02:50,160
圆圈 最近我们学习的另一个类

54
00:02:50,160 --> 00:02:53,080
称为 TwilioRestClient

55
00:02:53,080 --> 00:02:54,930
因为空间有限 我使用了缩写

56
00:02:54,930 --> 00:02:58,500
这个类包含定义如何

57
00:02:58,500 --> 00:03:00,570
连接 Twillo 和发送短信的信息

58
00:03:00,570 --> 00:03:04,560
使用这个蓝图 我们可以创建

59
00:03:04,560 --> 00:03:07,530
一个叫做 Client 的实例 Client 可以执行类中

60
00:03:07,530 --> 00:03:10,690
类中定义的操作 如发送

61
00:03:10,690 --> 00:03:12,950
短信 所以你可以将

62
00:03:12,950 --> 00:03:16,700
类视为蓝图 其中包含一些

63
00:03:16,700 --> 00:03:18,940
已定义的基本信息 然后你可以

64
00:03:18,940 --> 00:03:23,330
将其对象当做这张蓝图的例子或实例

