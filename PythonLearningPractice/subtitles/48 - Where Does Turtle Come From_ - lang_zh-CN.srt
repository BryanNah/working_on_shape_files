1
00:00:00,310 --> 00:00:02,280
非常感谢你完成并提交任务 我会

2
00:00:02,280 --> 00:00:05,460
定期在论坛上进行反馈

3
00:00:05,460 --> 00:00:07,142
好的 那么我现在将告诉你们 Python

4
00:00:07,142 --> 00:00:10,150
如何知道这个叫 Turtle 的东西

5
00:00:10,150 --> 00:00:14,970
在 Python 标准库中 有一个文档的名字是

6
00:00:16,210 --> 00:00:20,620
turtle 这里是小写的 t 在这个文档中

7
00:00:20,620 --> 00:00:25,870
有一个新的东西 而这个新东西叫“类” (class)

8
00:00:25,870 --> 00:00:29,840
class Turtle 这里的 T 是大写的

9
00:00:29,840 --> 00:00:31,330
这和我们之前所学习的

10
00:00:31,330 --> 00:00:33,700
有所不同 我们之前所学的是某种文档

11
00:00:33,700 --> 00:00:38,010
比如 webbrower. (注意这里的点)

12
00:00:38,010 --> 00:00:41,620
某个函数 比如 open 但是我们还没

13
00:00:41,620 --> 00:00:45,390
见过这个叫“类”的东西 那么问题来了

14
00:00:45,390 --> 00:00:47,450
什么是类？目前来说 你可以将

15
00:00:47,450 --> 00:00:51,040
类想象为一个整洁的箱子 它将东西很好地

16
00:00:51,040 --> 00:00:53,500
整理在一起 并且它能让我们

17
00:00:53,500 --> 00:00:58,850
写 turtle.Turtle 这样的代码 和后面这个看上去

18
00:00:58,850 --> 00:01:03,920
很奇怪的括号 就好像在调用一个函数 事实上 当我们写这段代码时

19
00:01:03,920 --> 00:01:06,060
我们确实是调用了函数

20
00:01:06,060 --> 00:01:09,670
一个叫 __init__ 的函数 它在 Turtle 类中被定义

21
00:01:09,670 --> 00:01:13,400
init 的意思是 initialize (初始化) 然后

22
00:01:13,400 --> 00:01:16,130
它所做的事是在内存内

23
00:01:16,130 --> 00:01:20,960
开辟一个空间给 Turtle 类的新实例或者新对象 在这个例子中

24
00:01:20,960 --> 00:01:26,180
就是 brad 实例 brad 现在可以访问 Turtle 类内的其他方法

25
00:01:26,180 --> 00:01:33,012
像是 forward 和 right

26
00:01:33,012 --> 00:01:35,824
forward 使 brad 向前 right 使 brad 转右

27
00:01:35,824 --> 00:01:38,240
别就这么轻信我的话

28
00:01:38,240 --> 00:01:40,210
让我们一起来阅读文档

