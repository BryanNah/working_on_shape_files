1
00:00:00,420 --> 00:00:03,350
现在 我们又回到了这项重要的设计 

2
00:00:03,350 --> 00:00:06,280
你会注意到 到目前为止我们

3
00:00:06,280 --> 00:00:09,420
只为类 movie 创建了一个实例 这个实例是

4
00:00:09,420 --> 00:00:12,180
Toy Story 接下来我们要做的是

5
00:00:12,180 --> 00:00:14,800
创建类 movie 的另一个实例 这一次

6
00:00:14,800 --> 00:00:18,290
我们要创建 Avatar 为此 我

7
00:00:18,290 --> 00:00:20,700
又回到我的代码 这是类 movie 的

8
00:00:20,700 --> 00:00:25,520
代码 这是我的 entertainment_center.py 文件 

9
00:00:25,520 --> 00:00:28,740
就是在这个文件里我创建了第一个实例 Toy Story 

10
00:00:28,740 --> 00:00:31,050
现在 你可能注意到我减小了

11
00:00:31,050 --> 00:00:33,940
代码的字体大小 我这样做是为了

12
00:00:33,940 --> 00:00:36,520
在一个视频图像中展示所有的代码 这样

13
00:00:36,520 --> 00:00:39,350
有助于你更好地理解 接下来 我要调用

14
00:00:39,350 --> 00:00:44,410
media.Movie 来创建名为 avatar 的实例 我需要提供

15
00:00:44,410 --> 00:00:46,580
的第一条信息就是电影的

16
00:00:46,580 --> 00:00:50,650
名称 那就是 Avatar 接下来是故事情节 

17
00:00:50,650 --> 00:00:57,390
那就是 a marine on an alien planet（外星球上的海军队员） 接下来是 Avatar 的电影海报 

18
00:00:57,390 --> 00:01:02,630
我会把它粘贴在这里 最后一条信息是 Avatar 的

19
00:01:02,630 --> 00:01:06,672
YouTube 预告片 我会把它粘贴在这里 好了 这就是

20
00:01:06,672 --> 00:01:09,520
我们的新实例 Avatar 我们接下来打印出它的

21
00:01:09,520 --> 00:01:14,655
故事情节 我会说 print avatar.storyline 

22
00:01:14,655 --> 00:01:19,650
[声音] 好了 我还要注释出

23
00:01:19,650 --> 00:01:22,460
之前的打印语句 它打印了两次 

24
00:01:22,460 --> 00:01:26,420
toy story、故事情节 现在我来

25
00:01:26,420 --> 00:01:29,470
保存这个文件 在我

26
00:01:29,470 --> 00:01:32,500
运行这个程序之前 我来问你一个问题 你认为

27
00:01:32,500 --> 00:01:34,740
这里这条代码的输出

28
00:01:34,740 --> 00:01:37,430
会是什么？我知道这条

29
00:01:37,430 --> 00:01:39,730
代码的字体确实太小了 看不清楚 那我来

30
00:01:39,730 --> 00:01:43,130
将它放大一点 好了 

31
00:01:43,130 --> 00:01:46,540
现在代码字体变大了 这是我们创建

32
00:01:46,540 --> 00:01:50,550
实例 avatar 的位置 这里我们在尝试打印它的故事情节 那么 你认为

33
00:01:50,550 --> 00:01:51,670
以下代码的输出

34
00:01:51,670 --> 00:01:54,440
会是什么呢？这里有一些答案选项 

