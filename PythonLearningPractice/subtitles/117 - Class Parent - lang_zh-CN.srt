1
00:00:00,330 --> 00:00:02,320
现在右上角是我们

2
00:00:02,320 --> 00:00:04,280
打算构造的类的设计

3
00:00:04,280 --> 00:00:07,040
我到目前为止创建了一个新的

4
00:00:07,040 --> 00:00:11,310
Python 文件 名为 inheritance.py

5
00:00:11,310 --> 00:00:13,530
在我们的设计的基础上 我将

6
00:00:13,530 --> 00:00:18,320
创建一个类 名称为 Parent 好啦 下一步是

7
00:00:18,320 --> 00:00:21,370
是初始化类 Parent 的变量

8
00:00:21,370 --> 00:00:25,350
如 last_name 和 eye_color 要这样做

9
00:00:25,350 --> 00:00:27,500
我需要定义此类为 init 方法

10
00:00:27,500 --> 00:00:30,180
或构造函数 这个函数的第一个自变量

11
00:00:30,180 --> 00:00:33,365
我们知道 是 self 类 Parent 的两个

12
00:00:33,365 --> 00:00:38,040
实例变量是 self.last_name 和

13
00:00:38,040 --> 00:00:42,010
self.eye_color 现在我们知道 init 函数

14
00:00:42,010 --> 00:00:45,150
会接收几个作为自变量的值

15
00:00:45,150 --> 00:00:46,950
我把它们加在这里 然后

16
00:00:46,950 --> 00:00:50,720
我们将使用这两个自变量初始化我们的实例变量

17
00:00:50,720 --> 00:00:56,160
我接下来再做这个吧 好啦 你可能注意到了 这段代码

18
00:00:56,160 --> 00:00:58,610
和我们之前编写的类 Movie 的

19
00:00:58,610 --> 00:01:01,300
代码挺相似 顺便说一句 我在这里

20
00:01:01,300 --> 00:01:03,000
将执行的一个新的操作

21
00:01:03,000 --> 00:01:05,890
是在 init 方法内增加一条快速打印语句 它将

22
00:01:05,890 --> 00:01:11,930
打印 Parent Constructor Called (父构造函数被调用)

23
00:01:11,930 --> 00:01:15,895
这个打印语句将在类 Parent 每次被调用时

24
00:01:15,895 --> 00:01:19,090
明确地告诉我们

25
00:01:19,090 --> 00:01:21,140
好的 为了确保我们目前为止

26
00:01:21,140 --> 00:01:23,760
所写的代码可以有效执行 我们

27
00:01:23,760 --> 00:01:27,000
来使用一下这个类 我将定义类 Parent 的

28
00:01:27,000 --> 00:01:31,370
一个实例 称为 billy_cyrus

29
00:01:31,370 --> 00:01:34,530
然后提供必要的两个自变量 其中

30
00:01:34,530 --> 00:01:37,490
一个是 last_name 为

31
00:01:37,490 --> 00:01:40,770
Cyrus 另一个是 eye_color

32
00:01:40,770 --> 00:01:44,500
假如为蓝色 这里我要

33
00:01:44,500 --> 00:01:47,500
提醒一下大家 通常情况下 我会留着这两项

34
00:01:47,500 --> 00:01:49,480
类 Parent 的定义和创建

35
00:01:49,480 --> 00:01:52,140
它的实例 我会将

36
00:01:52,140 --> 00:01:56,050
它们保留在不同的 Python 文件中 但是为了便于展示

37
00:01:56,050 --> 00:02:02,009
我把它们放在了同一个文件中 好了 为了

38
00:02:02,009 --> 00:02:06,479
展示这个实例有用

39
00:02:06,479 --> 00:02:15,300
我要打印出它的姓 我保存 然后运行

40
00:02:15,300 --> 00:02:18,450
这是我的输出 它说父构造函数

41
00:02:18,450 --> 00:02:21,290
被调用了 这似乎是合理的 因为我创建

42
00:02:21,290 --> 00:02:23,820
了一个称为 billy_cyrus 的实例

43
00:02:23,820 --> 00:02:26,260
只要我们这样做了 父类的 _init_ 函数

44
00:02:26,260 --> 00:02:28,650
就会被调用 它里面有一个

45
00:02:28,650 --> 00:02:31,780
打印语句 然后 我打印出了 Billy Cyrus 的姓

46
00:02:31,780 --> 00:02:36,980
是正确的 好的 到目前为止一切顺利

47
00:02:36,980 --> 00:02:40,640
现在 你会注意到我们到目前为止所做的事情中

48
00:02:40,640 --> 00:02:45,100
没有什么新鲜的 我们将尝试的新东西名为继承

49
00:02:45,100 --> 00:02:48,900
我们创建类 Child 时会发生继承 接下来我们就认识一下它吧

