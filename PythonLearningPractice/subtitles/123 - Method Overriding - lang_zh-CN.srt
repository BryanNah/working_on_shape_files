1
00:00:00,200 --> 00:00:01,967
好的 我又要回到

2
00:00:01,967 --> 00:00:04,075
代码了 这次我要讲一些

3
00:00:04,075 --> 00:00:07,657
新东西 因为类 Child 继承于类 Parent 

4
00:00:07,657 --> 00:00:12,213
这个方法 show_info 也被继承了 所以 

5
00:00:12,213 --> 00:00:15,524
也就是说类 Child 实例的实例 

6
00:00:15,524 --> 00:00:19,066
如 miley_cyrus 也可以调用 show_info

7
00:00:19,066 --> 00:00:22,377
方法 尽管这个方法在

8
00:00:22,377 --> 00:00:26,000
类 Child 中并没有明确定义 我接下来再做这个吧 

9
00:00:26,000 --> 00:00:27,900
我首先要做的是取消

10
00:00:27,900 --> 00:00:29,900
对创建 miley_cyrus 案例

11
00:00:29,900 --> 00:00:34,290
的这行代码的注释 然后调用

12
00:00:34,290 --> 00:00:39,190
方法 show_info 好了 因为我现在需要专注于

13
00:00:39,190 --> 00:00:41,770
获得这个 show_info 方法的输出 我要

14
00:00:41,770 --> 00:00:43,930
暂时将之前的 show_info 方法注释掉 

15
00:00:45,310 --> 00:00:48,660
好了 在我运行程序之前 我想

16
00:00:48,660 --> 00:00:51,255
再次强调 我正在使用案例

17
00:00:51,255 --> 00:00:54,920
miley_cyrus 调用方法 show_info 现在这个

18
00:00:54,920 --> 00:00:59,090
方法并不明确地存在于类 Child 中 但是 

19
00:00:59,090 --> 00:01:02,210
由于类 Child 继承于类 Parent   此

20
00:01:02,210 --> 00:01:05,770
方法 show_info 事实上可以

21
00:01:05,770 --> 00:01:10,010
被类 Child 的实例使用 那我就保存并运行一下这个程序 这就是我的

22
00:01:10,010 --> 00:01:13,250
输出 程序并没有抛出任何错误 而且

23
00:01:13,250 --> 00:01:16,365
实例 miley_cyrus 的姓和眼睛颜色

24
00:01:16,365 --> 00:01:21,850
确实被打印了出来 好的 我要做的下一件事情是

25
00:01:21,850 --> 00:01:25,920
在类 Child 内创建一个叫 show_info 的方法 

26
00:01:25,920 --> 00:01:28,350
看看会有什么结果 那我

27
00:01:28,350 --> 00:01:34,030
就在类 Child 中创建一个叫 show_info 的新方法 

28
00:01:34,030 --> 00:01:36,430
现在这个方法 show_info 将打印出

29
00:01:36,430 --> 00:01:38,790
与类 Child 相关的三个方面信息 

30
00:01:38,790 --> 00:01:41,370
它的姓、眼睛颜色和玩具数量 

31
00:01:42,780 --> 00:01:44,870
现在我们在打印出子的

32
00:01:44,870 --> 00:01:48,640
姓 然后我们在打印出子的眼睛颜色 

33
00:01:50,310 --> 00:01:53,080
最后 我们在打印出玩具的数量 

34
00:01:53,080 --> 00:01:55,520
为了正确的打印这个数量 我们

35
00:01:55,520 --> 00:01:58,020
必须把它封装在串函数中 现在 如果

36
00:01:58,020 --> 00:02:01,550
我保存和运行这个程序 我的假设是当我

37
00:02:01,550 --> 00:02:04,880
使用 miley_cyrus（顺便说一句 这是类 Child 的

38
00:02:04,880 --> 00:02:08,038
一个实例）调用 show_info 这个 show_info

39
00:02:08,038 --> 00:02:10,163
方法将被调用 而非

40
00:02:10,163 --> 00:02:13,240
类 Parent 中的 show_info 方法 现在我

41
00:02:13,240 --> 00:02:16,550
保存和运行下这个程序 结果出来了 

42
00:02:16,550 --> 00:02:19,440
我们正在打印类 Child 的姓、眼睛

43
00:02:19,440 --> 00:02:22,600
颜色和玩具数量 所以

44
00:02:22,600 --> 00:02:24,660
我们刚才真正所做的是

45
00:02:24,660 --> 00:02:29,070
在类 Child 和类 Parent 中 

46
00:02:29,070 --> 00:02:33,330
定义了名称同为 show_info 的方法 在这个类 Child 的

47
00:02:33,330 --> 00:02:36,910
案例中 类 Child 覆盖从类 Parent 继承的

48
00:02:36,910 --> 00:02:41,650
方法的能力叫做方法覆盖 

