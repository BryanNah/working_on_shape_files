1
00:00:00,440 --> 00:00:03,300
现在 在我们结束这个项目之前 我想

2
00:00:03,300 --> 00:00:05,850
花几分钟时间串联一下我们在这节课中

3
00:00:05,850 --> 00:00:08,300
到目前为止所学的东西 刚开始

4
00:00:08,300 --> 00:00:11,290
我们画了正方形 编写了一条

5
00:00:11,290 --> 00:00:15,890
brad = turtle.Turtle 的代码

6
00:00:15,890 --> 00:00:19,090
我们在后台真正所做的事情是创建了

7
00:00:19,090 --> 00:00:22,818
Turtle 类的一个对象或实例 之后

8
00:00:22,818 --> 00:00:26,820
我们对那个实例执行了 brad.forward 

9
00:00:26,820 --> 00:00:29,730
然后我们想从电脑上的

10
00:00:29,730 --> 00:00:31,960
文件中读取内容 所以我们编写了

11
00:00:31,960 --> 00:00:35,300
一段代码 quotes = open(file) (其中 file 为文件位置)

12
00:00:35,300 --> 00:00:38,422
而我们在后台真正执行的操作

13
00:00:38,422 --> 00:00:42,070
是创建了 File 类的一个对象 然后我们

14
00:00:42,070 --> 00:00:46,560
可以对那个对象执行 quotes.read

15
00:00:46,560 --> 00:00:49,460
当我们想上网访问某个网站时

16
00:00:49,460 --> 00:00:52,040
我们写了一条代码 connection

17
00:00:52,040 --> 00:00:55,270
= urllib.urlopen 然后这条

18
00:00:55,270 --> 00:00:58,930
代码又返回了一个类似文件的对象或实例

19
00:00:58,930 --> 00:01:00,210
我们可以对那个实例

20
00:01:00,210 --> 00:01:04,900
执行 connection.read 在上述三个

21
00:01:04,900 --> 00:01:08,600
例子中 我们创建了实例或对象

22
00:01:08,600 --> 00:01:11,373
并使用了这些对象 现在 你们

23
00:01:11,373 --> 00:01:16,620
中的某些人可能会说在冒犯语编辑器例子中 我们用的全是函数

24
00:01:16,620 --> 00:01:21,650
如 open 和 urlopen 的函数 没有我们在

25
00:01:21,650 --> 00:01:25,890
之前的 turtle 例子中说看到的类 尽管表面上

26
00:01:25,890 --> 00:01:28,450
看起来我们在冒犯语编辑器例子中

27
00:01:28,450 --> 00:01:31,420
没有使用任何类 但是如果你仔细研究一下

28
00:01:31,420 --> 00:01:35,950
open 和 urlopen 函数究竟是如何在 Python 中

29
00:01:35,950 --> 00:01:39,470
实施的 我们会发现某些类的 init 函数

30
00:01:39,470 --> 00:01:42,580
被调用来返回这些对象

31
00:01:43,660 --> 00:01:46,730
好的 我们再来看看另一个

32
00:01:46,730 --> 00:01:49,820
如何使用类的例子 在这之后你们就会更加清楚了

